<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>결과 집합 데이터 샘플 캐싱</title><meta name="Language" content="ko-kr" /><meta name="System.Keywords" content="결과 집합 샘플 캐싱" /><meta name="Microsoft.Help.Id" content="13a95ebb-996c-4713-a1bd-5834fe22a334" /><meta name="Description" content="이 SQL Server용 Microsoft JDBC Driver 샘플 응용 프로그램에서는 데이터베이스에서 대량의 데이터 집합을 검색한 후 SQLServerResultSet 개체의 setFetchSize 메서드를 사용하여 클라이언트에서 캐시할 데이터 행의 수를 제어하는 방법을 보여 줍니다." /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">결과 집합 데이터 샘플 캐싱</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>이 SQL Server용 Microsoft JDBC Driver 샘플 응용 프로그램에서는 데이터베이스에서 대량의 데이터 집합을 검색한 후 <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> 개체의 <a href="233bf4f8-4758-42d0-a80b-33e34fa78027.htm">setFetchSize</a> 메서드를 사용하여 클라이언트에서 캐시할 데이터 행의 수를 제어하는 방법을 보여 줍니다.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>클라이언트에서 캐시된 행의 수를 제한하는 것은 결과 집합에 포함된 전체 행 수를 제한한다는 의미가 아닙니다. 결과 집합에 포함된 전체 행 수를 제어하려면 <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> 개체와 <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> 개체에서 상속된 <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> 개체의 <a href="cccc0667-589b-4655-8ea8-14ae8b2eb9dc.htm">setMaxRows</a> 메서드를 사용합니다.</p></div><p>클라이언트에서 캐시되는 행 수에 제한을 설정하려면 우선 <b>Statement</b> 개체를 만들 때 사용할 커서 유형을 구체적으로 지정하여 <b>Statement</b> 개체 중 하나를 만들 때 서버측 커서를 제일 먼저 사용해야 합니다. 예를 들어 JDBC 드라이버에서 제공하는 커서 유형인 TYPE_SS_SERVER_CURSOR_FORWARD_ONLY는 SQL Server 데이터베이스에 사용되는 빨리 감기 및 읽기 전용 서버측 커서입니다.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>이 대신에 SQL Server 전용 커서 유형을 사용하려면 selectMethod 연결 문자열 속성 값을 "cursor"로 설정하여 사용하면 됩니다. JDBC 드라이버에서 지원하는 커서 유형에 대한 자세한 내용은 <span sdata="link"><a href="4f4d3db7-4f76-450d-ab63-141237a4f034.htm">커서 유형 이해</a></span>를 참조하십시오.</p></div><p><b>Statement</b> 개체에 포함된 쿼리를 실행하고 해당 데이터가 결과 집합으로 클라이언트에 반환된 후에는 <b>setFetchSize</b> 메서드를 호출하여 한 번에 데이터베이스에서 검색할 수 있는 데이터 양을 제어할 수 있습니다. 예를 들어 하나의 테이블에 데이터 행이 100개가 있으며 반입 크기를 10으로 설정한 경우, 클라이언트에서는 항상 10개의 데이터 행만 캐시됩니다. 이와 같은 경우 데이터 처리 속도가 저하되기는 하지만 클라이언트의 메모리를 적게 사용한다는 이점이 있으므로 대량의 데이터를 처리해야 하는 경우 특히 유용합니다.</p><p>이 샘플의 코드 파일 이름은 cacheRS.java이며 다음과 같은 위치에 있습니다.</p><p>&lt;<i>installation directory</i>&gt;\sqljdbc_&lt;<i>version</i>&gt;\&lt;<i>language</i>&gt;\help\samples\resultsets</p></div><h1 class="heading">요구 사항</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>이 샘플 응용 프로그램을 실행하려면 sqljdbc.jar 파일 또는 sqljdbc4.jar 파일을 포함하도록 클래스 경로를 설정해야 합니다. 클래스 경로에 sqljdbc.jar 또는 sqljdbc4.jar에 대한 항목이 없으면 샘플 응용 프로그램에서 일반적인 "클래스를 찾을 수 없습니다." 예외가 발생합니다. 또한 SQL Server 2005 AdventureWorks 샘플 데이터베이스에 대한 액세스 권한이 필요합니다. 클래스 경로를 설정하는 방법은 <span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">JDBC 드라이버 사용</a></span>을 참조하십시오.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>SQL Server용 Microsoft JDBC Driver는 기본 설정된 JRE(Java Runtime Environment)에 따라 사용할 수 있는 sqljdbc.jar 및 sqljdbc4.jar 클래스 라이브러리 파일을 제공합니다. JAR 파일 선택에 대한 자세한 내용은 <span sdata="link"><a href="447792bb-f39b-49b4-9fd0-1ef4154c74ab.htm">JDBC 드라이버 시스템 요구 사항</a></span>을 참조하십시오.</p></div></div><h1 class="heading">예</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>다음 예제 코드에서는 AdventureWorks 샘플 데이터베이스에 연결합니다. 연결 후 <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> 개체가 있는 SQL 문을 사용하고 서버측 커서 유형을 지정한 다음 SQL 문을 실행하여 반환하는 데이터를 <b>SQLServerResultSet</b> 개체로 지정합니다.</p><p>그런 다음 예제 코드에서는 사용할 반입 크기 및 결과 집합을 인수로 전달하여 사용자 지정 <b>timerTest</b> 메서드를 호출합니다. <b>timerTest</b> 메서드는 <b>setFetchSize</b> 메서드를 사용하여 결과 집합의 반입 크기를 설정하고, 테스트 시작 시간을 설정한 후 <span class="code">While</span> 루프를 사용하여 결과 집합을 반복합니다. <span class="code">While</span> 루프가 종료됨과 동시에 예제 코드는 테스트 중지 시간을 설정한 다음 반입 크기, 처리된 행의 수, 테스트 실행에 소요된 시간 등 테스트 결과를 표시합니다.</p><div class="sampleCode"><span codeLanguage="other"><pre>import java.sql.*;
import com.microsoft.sqlserver.jdbc.SQLServerResultSet;

public class cacheRS {

   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;

      try {

         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);

         // Create and execute an SQL statement that returns a large
         // set of data and then display it.
         String SQL = "SELECT * FROM Sales.SalesOrderDetail;";
         stmt = con.createStatement(SQLServerResultSet.TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, +
               SQLServerResultSet.CONCUR_READ_ONLY);

         // Perform a fetch for every row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1, rs);
         rs.close();

         // Perform a fetch for every tenth row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(10, rs);
         rs.close();

         // Perform a fetch for every 100th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(100, rs);
         rs.close();

         // Perform a fetch for every 1000th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1000, rs);
         rs.close();

         // Perform a fetch for every 128th row (the default) in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(0, rs);
         rs.close();
      }

      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }

      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }

   private static void timerTest(int fetchSize, ResultSet rs) {
      try {

         // Declare the variables for tracking the row count and elapsed time.
         int rowCount = 0;
         long startTime = 0;
         long stopTime = 0;
         long runTime = 0;

         // Set the fetch size then iterate through the result set to
         // cache the data locally.
         rs.setFetchSize(fetchSize);
         startTime = System.currentTimeMillis();
         while (rs.next()) {
            rowCount++;
         }
         stopTime = System.currentTimeMillis();
         runTime = stopTime - startTime;

         // Display the results of the timer test.
         System.out.println("FETCH SIZE: " + rs.getFetchSize());
         System.out.println("ROWS PROCESSED: " + rowCount);
         System.out.println("TIME TO EXECUTE: " + runTime);
         System.out.println();

      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}</pre></span></div></div><span id="seeAlsoSpan"><h1 class="heading">참고 항목</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="4fc4b1c6-3075-4ad7-9244-865d9ede7ae6.htm">결과 집합 사용</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">이 항목에 대한 <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\d의견을%20보내주셔서%20감사합니다.%20개발자%20작성%20팀에서는%20설명서를%20보완하는%20데%20보내주신%20의견을%20적극%20활용하고%20있습니다.%20보내주신%20의견을%20검토하는%20동안%20명확한%20설명이%20필요하거나%20해결책에%20대한%20추가%20의견을%20묻는%20전자%20메일을%20받을%20수%20있습니다.%20귀하의%20전자%20메일은%20기타%20다른%20용도로%20사용되지%20않고%20검토가%20끝난%20후%20바로%20폐기됩니다.%0\AMicrosoft의%20개인%20정보%20취급%20방침에%20대한%20자세한%20내용은%20http://privacy.microsoft.com/ko-kr/default.aspx를%20참조하십시오.%0\A%0\d','고객%20의견');">사용자 의견</a>을 Microsoft로 보내 주십시오.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft. All rights reserved.</a></p></span></div></div></body></html>