<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>SQLXML 데이터 형식 샘플</title><meta name="Language" content="ko-kr" /><meta name="System.Keywords" content="SQLXML 데이터 형식 샘플" /><meta name="Microsoft.Help.Id" content="8f2ff25b-71fd-46d7-b6de-d656095d2aad" /><meta name="Description" content="이 SQL Server용 Microsoft JDBC Driver 샘플 응용 프로그램에서는 XML 데이터를 관계형 데이터베이스에 저장하는 방법, XML 데이터를 데이터베이스에서 검색하는 방법 및 SQLXML Java 데이터 형식으로 XML 데이터를 구문 분석하는 방법을 보여 줍니다." /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">SQLXML 데이터 형식 샘플</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>이 SQL Server용 Microsoft JDBC Driver 샘플 응용 프로그램에서는 XML 데이터를 관계형 데이터베이스에 저장하는 방법, XML 데이터를 데이터베이스에서 검색하는 방법 및 <span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span> Java 데이터 형식으로 XML 데이터를 구문 분석하는 방법을 보여 줍니다.</p><p>이 섹션의 코드 예제에서는 SAX(Simple API for XML) 파서를 사용합니다. SAX는 XML 문서의 이벤트 기반 구문 분석을 위해 공개적으로 개발된 표준입니다. SAX는 XML 데이터 작업을 위한 응용 프로그래밍 인터페이스도 제공합니다. 응용 프로그램에서는 DOM(문서 개체 모델) 또는 StAX(Streaming API for XML) 등 다른 XML 파서도 사용할 수 있습니다. </p><p>DOM(문서 개체 모델)은 XML 문서, 조각, 노드 또는 노드 집합의 프로그래밍 방식 표현을 제공합니다. DOM은 XML 데이터 작업에 사용할 수 있는 응용 프로그래밍 인터페이스도 제공합니다. 마찬가지로 StAX(Streaming API for XML)는 끌어오기 방식의 XML 구문 분석용 Java 기반 API입니다.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>SAX 파서 API를 사용하려면 javax.xml 패키지에서 표준 SAX 구현을 가져와야 합니다.</p></div><p>이 샘플의 코드 파일 이름은 sqlxmlExample.java이며 다음 위치에 있습니다.</p><p>&lt;<i>installation directory</i>&gt;\sqljdbc_&lt;<i>version</i>&gt;\&lt;<i>language</i>&gt;\help\samples\datatypes</p></div><h1 class="heading">요구 사항</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>이 샘플 응용 프로그램을 실행하려면 sqljdbc4.jar 파일을 포함하도록 클래스 경로를 설정해야 합니다. 클래스 경로에 sqljdbc4.jar에 대한 항목이 없으면 샘플 응용 프로그램에서 "클래스를 찾을 수 없습니다." 예외가 발생합니다. 클래스 경로를 설정하는 방법은 <span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">JDBC 드라이버 사용</a></span>을 참조하십시오.</p><p>또한 이 샘플 응용 프로그램을 실행하려면 SQL Server 2005 AdventureWorks 샘플 데이터베이스에 대한 액세스 권한이 필요합니다.</p></div><h1 class="heading">예</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>다음 예제의 샘플 코드에서는 SQL Server 2005 AdventureWorks 데이터베이스에 연결한 다음 createSampleTables 메서드를 호출합니다. </p><p>createSampleTables 메서드는 테스트 테이블인 TestTable1 및 TestTable2를 삭제합니다(있는 경우). 그런 다음 TestTable1에 행 2개를 삽입합니다. </p><p>또한 코드 샘플에는 다음과 같은 세 개의 메서드와 xampleContentHandler라는 클래스도 포함되어 있습니다. </p><p>ExampleContentHandler 클래스는 파서 이벤트에 대한 메서드를 정의하는 사용자 지정 콘텐츠 처리기를 구현합니다.</p><p>showGetters 메서드는 SAX, ContentHandler 및 XMLReader를 사용하여 SQLXML 개체의 데이터를 구문 분석하는 방법을 보여 줍니다. 먼저 코드 샘플에서는 사용자 지정 콘텐츠 처리기의 인스턴스인 ExampleContentHandler를 만듭니다. 다음으로는 TestTable1에서 데이터 집합을 반환하는 SQL 문을 만들고 실행합니다. 그런 다음 SAX 파서를 가져와서 XML 데이터를 구문 분석합니다.</p><p>showSetters 메서드는 SAX, ContentHandler 및 ResultSet을 사용하여 <span sdata="langKeyword" value="xml"><span class="keyword">xml</span></span> 열을 설정하는 방법을 보여 줍니다. 먼저 Connection 클래스의 <a href="cf5bfcdd-bc03-4c5b-b554-d8a8a4067e93.htm">createSQLXML</a> 메서드를 사용하여 빈 SQLXML 개체를 만듭니다. 그런 다음 SQLXML 개체에 데이터를 쓰는 데 사용할 콘텐츠 처리기의 인스턴스를 가져옵니다. 그런 다음 TestTable1에 데이터를 씁니다. 마지막으로 결과 집합에 포함된 데이터 행을 반복하며 <a href="a07e0f30-cbc6-4ad7-b931-c30cad382e64.htm">getSQLXML</a> 메서드를 사용하여 XML 데이터를 읽습니다.</p><p>showTransformer 메서드는 SAX 및 Transformer를 사용하여 한 테이블에서 XML 데이터를 가져온 다음 다른 테이블에 삽입하는 방법을 보여 줍니다. 먼저 TestTable1에서 원본 SQLXML 개체를 검색합니다. 그런 다음 Connection 클래스의 <a href="cf5bfcdd-bc03-4c5b-b554-d8a8a4067e93.htm">createSQLXML</a> 메서드를 사용하여 빈 대상 SQLXML 개체를 만듭니다. 그런 다음 대상 SQLXML 개체를 업데이트하고 TestTable2에 XML 데이터를 씁니다. 마지막으로 결과 집합에 포함된 데이터 행을 반복하며 <a href="a07e0f30-cbc6-4ad7-b931-c30cad382e64.htm">getSQLXML</a> 메서드를 사용하여 TestTable2에서 XML 데이터를 읽습니다.</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>import java.sql.*;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;

import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.sax.SAXTransformerFactory;

import org.xml.sax.*;

public class sqlxmlExample {

   public static void main(String[] args) {
	   
      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;

      try {
         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);

         // Create initial sample data.
         createSampleTables(con);

         // The showGetters method demonstrates how to parse the data in the 
         // SQLXML object by using the SAX, ContentHandler and XMLReader.  
         showGetters(con);            

         // The showSetters method demonstrates how to set the xml column 
         // by using the SAX, ContentHandler, and ResultSet.
         showSetters(con);   

         // The showTransformer method demonstrates how to get an XML data 
         // from one table and insert that XML data to another table 
         // by using the SAX and the Transformer. 
         showTransformer(con);        
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }
      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }

   private static void showGetters(Connection con) {
	   
      try {
          // Create an instance of the custom content handler.   
          ExampleContentHandler myHandler = new ExampleContentHandler();
		   
          // Create and execute an SQL statement that returns a
          // set of data.       
          String SQL = "SELECT * FROM TestTable1";
          Statement stmt = con.createStatement();
          ResultSet rs = stmt.executeQuery(SQL);

          rs.next();

          SQLXML xmlSource = rs.getSQLXML("Col3");

          // Send SAX events to the custom content handler.
          SAXSource sxSource =  xmlSource.getSource(SAXSource.class);
          XMLReader xmlReader = sxSource.getXMLReader();
          xmlReader.setContentHandler(myHandler);

	      System.out.println("showGetters method: Parse an XML data in TestTable1 =&gt; ");
          xmlReader.parse(sxSource.getInputSource());

      } catch (Exception e) {
          e.printStackTrace();
      }
   }

   private static void showSetters(Connection con) {

      try {
         // Create and execute an SQL statement, retrieving an updatable result set.
         String SQL = "SELECT * FROM TestTable1;";
         Statement stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
         ResultSet rs = stmt.executeQuery(SQL);
		   
         // Create an empty SQLXML object.
         SQLXML sqlxml = con.createSQLXML();

         // Set the result value from SAX events.
         SAXResult sxResult = sqlxml.setResult(SAXResult.class);
         ContentHandler myHandler = sxResult.getHandler();

         // Set the XML elements and attributes into the result.
         myHandler.startDocument();
         myHandler.startElement(null, "contact", "contact", null);
         myHandler.startElement(null, "name", "name", null);
         myHandler.endElement(null, "name", "name");
         myHandler.startElement(null, "phone", "phone", null);
         myHandler.endElement(null, "phone", "phone");		   
         myHandler.endElement(null, "contact", "contact");
         myHandler.endDocument();

         // Update the data in the result set.
         rs.moveToInsertRow();
         rs.updateString("Col2", "C");
         rs.updateSQLXML("Col3", sqlxml);
         rs.insertRow();
		   
         // Display the data. 
         System.out.println("showSetters method: Display data in TestTable1 =&gt; ");
         while (rs.next()) {
           System.out.println(rs.getString("Col1") + " : " + rs.getString("Col2"));
           SQLXML xml = rs.getSQLXML("Col3");              
           System.out.println("XML column : " + xml.getString());
         }
      } catch (Exception e) {
         e.printStackTrace();
      }
   }

   private static void showTransformer(Connection con) {

      try {
          // Create and execute an SQL statement that returns a
          // set of data.       
          String SQL = "SELECT * FROM TestTable1";
          Statement stmt = con.createStatement();
          ResultSet rs = stmt.executeQuery(SQL);
	       
          rs.next();
	        
          // Get the value of the source SQLXML object from the database.
          SQLXML xmlSource = rs.getSQLXML("Col3");
	        
          // Get a Source to read the XML data. 
          SAXSource sxSource =  xmlSource.getSource(SAXSource.class);
	        
         // Create a destination SQLXML object without any data.
         SQLXML xmlDest = con.createSQLXML();

         // Get a Result to write the XML data.
         SAXResult sxResult = xmlDest.setResult(SAXResult.class);
	        
         // Transform the Source to a Result by using the identity transform.
         SAXTransformerFactory stf = (SAXTransformerFactory) TransformerFactory.newInstance();
         Transformer identity = stf.newTransformer();
         identity.transform(sxSource, sxResult);

         // Insert the destination SQLXML object into the database.
         PreparedStatement psmt = 
           con.prepareStatement(
              "INSERT INTO TestTable2" + " (Col2, Col3, Col4, Col5) VALUES (?, ?, ?, ?)");
         psmt.setString(1, "A");
         psmt.setString(2, "Test data");
         psmt.setInt(3, 123);
         psmt.setSQLXML(4, xmlDest);
         psmt.execute();
	        
         // Execute the query and display the data.	
         SQL = "SELECT * FROM TestTable2";
         stmt = con.createStatement();
         rs = stmt.executeQuery(SQL);

         System.out.println("showTransformer method : Display data in TestTable2 =&gt; ");
         while (rs.next()) {
            System.out.println(rs.getString("Col1") + " : " + rs.getString("Col2"));
            System.out.println(rs.getString("Col3") + " : " + rs.getInt("Col4"));
	          
            SQLXML xml = rs.getSQLXML("Col5");              
            System.out.println("XML column : " + xml.getString());
         }
     } catch (Exception e) {
        e.printStackTrace();
     }
   }

   private static void createSampleTables(Connection con) {

      try {
	  Statement stmt = con.createStatement();
		  
          // Drop the tables.
	  stmt.executeUpdate("if exists (select * from sys.objects where name = 'TestTable1')" +
                "drop table TestTable1" );

          stmt.executeUpdate("if exists (select * from sys.objects where name = 'TestTable2')" +
                "drop table TestTable2" );		  

          // Create empty tables.
          stmt.execute("CREATE TABLE TestTable1 (Col1 int IDENTITY, Col2 char, Col3 xml)");
          stmt.execute("CREATE TABLE TestTable2 (Col1 int IDENTITY, Col2 char, Col3 varchar(50), Col4 int, Col5 xml)");

          // Insert two rows to the TestTable1.
         String row1 = "&lt;contact&gt;&lt;name&gt;Contact Name 1&lt;/name&gt;&lt;phone&gt;XXX-XXX-XXXX&lt;/phone&gt;&lt;/contact&gt;";
         String row2 = "&lt;contact&gt;&lt;name&gt;Contact Name 2&lt;/name&gt;&lt;phone&gt;YYY-YYY-YYYY&lt;/phone&gt;&lt;/contact&gt;";

         stmt.executeUpdate("insert into TestTable1" + " (Col2, Col3) values('A', '" + row1 +"')");
         stmt.executeUpdate("insert into TestTable1" + " (Col2, Col3) values('B', '" + row2 +"')");
	      
       } catch (Exception e) {
          e.printStackTrace();
       }
   }
}

class ExampleContentHandler implements ContentHandler {

  public void startElement(String namespaceURI, String localName, String qName, Attributes atts) 
  throws SAXException {
	  System.out.println("startElement method: localName =&gt; " + localName);
  }
  public void characters(char[] text, int start, int length) throws SAXException {
  	  System.out.println("characters method");  
  }
  public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
      System.out.println("endElement method: localName =&gt; " + localName);		  
  } 
  public void setDocumentLocator(Locator locator) {
	  System.out.println("setDocumentLocator method");
  }
  public void startDocument() throws SAXException {
	  System.out.println("startDocument method");
  }
  public void endDocument() throws SAXException {
	  System.out.println("endDocument method");
  }
  public void startPrefixMapping(String prefix, String uri) throws SAXException {
	  System.out.println("startPrefixMapping method: prefix =&gt; " + prefix);
  }
  public void endPrefixMapping(String prefix) throws SAXException {
	  System.out.println("endPrefixMapping method: prefix =&gt; " + prefix);
  }
  public void skippedEntity(String name) throws SAXException {
	  System.out.println("skippedEntity method: name =&gt; " + name);
  }  
  public void ignorableWhitespace(char[] text, int start, int length) throws SAXException {
	  System.out.println("ignorableWhiteSpace method");
  }
  public void processingInstruction(String target, String data) throws SAXException {
	  System.out.println("processingInstruction method: target =&gt; " + target);
  }
}

</pre></span></div></div></div><span id="seeAlsoSpan"><h1 class="heading">참고 항목</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="b39f44d0-3710-4bc6-880c-35bd8c10a734.htm">데이터 형식(JDBC) 사용</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">이 항목에 대한 <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\d의견을%20보내주셔서%20감사합니다.%20개발자%20작성%20팀에서는%20설명서를%20보완하는%20데%20보내주신%20의견을%20적극%20활용하고%20있습니다.%20보내주신%20의견을%20검토하는%20동안%20명확한%20설명이%20필요하거나%20해결책에%20대한%20추가%20의견을%20묻는%20전자%20메일을%20받을%20수%20있습니다.%20귀하의%20전자%20메일은%20기타%20다른%20용도로%20사용되지%20않고%20검토가%20끝난%20후%20바로%20폐기됩니다.%0\AMicrosoft의%20개인%20정보%20취급%20방침에%20대한%20자세한%20내용은%20http://privacy.microsoft.com/ko-kr/default.aspx를%20참조하십시오.%0\A%0\d','고객%20의견');">사용자 의견</a>을 Microsoft로 보내 주십시오.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft. All rights reserved.</a></p></span></div></div></body></html>